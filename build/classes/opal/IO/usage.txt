http://opal.cs.arizona.edu/
See 00README for further details.
See website for terms of use.

Please cite: 
Wheeler, T.J. and Kececioglu, J.D.
Proceedings of the 15th ISCB Conference on Intelligent 
Systems for Molecular Biology, Bioinformatics 23, i559-i568, 2007.


Quick-start
-----------

To form an alignment of multiple input sequences, run:
   ./opal unaligned_seqs.fasta > alignment.fasta
or
   ./opal --in unaligned_seqs.fasta --out alignment.fasta


To align two fixed alignments, run:
   ./opal --in alignment1.fasta --in2 alignment2.fasta


To increase memory allocated to opal, use the --mem flag, e.g.:
   ./opal --mem 2G unaligned_seqs.fasta > alignment.fasta

For additional details, see the 00README file


***********************************************
** Note: input files must be in fasta format **
***********************************************



Common arguments (optional)
---------------------------

--in filename 
    Specify file (fasta format) containing the unaligned sequences
    that Opal is to align.
--in2 filename 
    With this option, an alignment of two alignments is performed. 
    The two files specified in "--in" and "--in2" must 
    both contain alignments, and be in fasta format.
--out filename 
    Specify the name of the file that Opal should write the 
    alignment to. Default is to print to STDOUT
--out_format [fasta|clustalw] 
    Default = fasta		
--align_method [exact|profile|mixed] 
    Default = mixed
	Alignment method used in building initial alignment 
	(before polishing)
    	* Exact method shows slightly better recovery of benchmarks.
		* Profile is much faster for large inputs.
		* Mixed method performs exact (slower) alignment on small 
		subproblems, and profile (faster) alignment on larger 
		subproblems.
--polish_align_method  [exact|profile|mixed]
    Default = value of align_method
    Alignment method used when performing post-polishing step
    See --align_method
--polish [exhaust_twocut|random_twocut|random_tree_twocut|random_threecut]
    Default = random_tree_twocut
    See ISMB paper for details
--polish_reps n 
    Default depends on alignment method and number of input sequences
--gamma n 
    Gap open penalty. 
    Defaults: Amino acid = 60; Nucleotide = 260.
--lambda n 
    Gap extension penalty. 
    Defaults: Amino acid = 38; Nucleotide = 69.
--gamma_term n 
    Open penalty for terminal gaps. 
    Defaults: Amino acid = 16; Nucleotide = 100. 
--lambda_term n 
    Extension penalty for terminal gaps. 
    Defaults: Amino acid = 36; Nucleotide = 66.   
--treein
    Name of file containing the merge tree (in Newick format)  
--treeout
    Name of file to which Opal should write the merge tree 
    it calculates (in Newick format)
--just_tree
    Just build the merge tree, then quit (no alignment)
--quiet 
    Restrict status updates printed to STDERR
--silent
	No output to STDERR
--distance_type  [kmer_normcost|normcost|pctid]
    Default = kmer_normcost
    pctid calculates a distance for each pair of sequences by 
        aligning the pair, then calculating the percent of all
        non-gap columns that are identical under a compressed 
        alphabet; the merge tree is built based on these costs.
    normcost calculates a distance for each pair of sequences 
        based on normalized alignment cost (see Opal paper for
        details); the merge tree is built based on these costs. 
    kmer_normcost causes an initial merge tree to be built based 
        on pairwise kmer counts (see MAFFT papers for basic 
        approach). With this tree, an initial mulitple alignment 
        is formed, and new pairwise distances (based on 
        normalized cost) are calculated from the pairwise 
        alignments induced by that multiple alignment. A new 
        merge tree is formed based on those distances. This may be 
        repeated (see --tree_iterations)
--tree_iterations
    Default = 2 (if distance_type == kmer_normcost).
    Number of times to repeat construction of merge tree based
    on alignment in previous step. Value of 1 will just 
    build an alignment based on the initial merge tree
--input_order 
    Output sequences of alignment in the same order as in the 
    input file.  This is default behavior.
--tree_order
    Output sequences of alignment in an order that depends on 
    the merge tree.  Default is --input_order
--protein
    Opal attempts to guess the type of sequences that are to be
    aligned.  If no characters are found in the input that are 
    amino-acid-only (not a nucleotide ambiguity code), then Opal
    guesses DNA. This argument forces treatment as protein sequence.
--use_struct
    Opal aligns protein sequences using a modified scoring scheme, 
    based on predicted secondary structure and requires psipred. See 
    00README for details. 
--structure_model [G1|G4|G6|G8]
    Default = G8
    Number of gap-levels, as described in Kim, Wheeler, and 
    Kececioglu 2009. G1 corresponds to the substitution model.
    G[468] correspond to substitution-and-gap models, with 
    4, 6, or 8 gap levels.
--facet
    Predict the accuracy of the produced alignment using Facet
    (Feature-based ACuracy EsTimator) by Kececioglu and DeBlasio 2012.
    Is automatically set when "--use_struct" is input. 
--configuration_file filename
    Opal produces several multiple alignments using the parameters
    contained in the file. See 00README for details, and 
    http://facet.cs.arizona.edu for parameter sets.
--repeat_configurations n
    Default = 1
    Number of times to produce an alignment for each input parameter 
    set.
--max_threads n
    The maximum number of concurrently running threads, one thread is 
    spawned for each parameter set (or repetition) input.
    Default is the number of available cores.
--out_config filename
    Location to print the produced alignments for each input 
    parameter set. The string "__CONFIG__" will be replaces with 
    the parameter set string when output, "__ITTERATION__" will be 
    replaced with the repetition number if this applies, and 
    "__FACETSCORE__" will be replaced with the Facet score if one 
    is available.
--out_best filename
    Location to print the  produced alignment with the highest Facet
    score if the scores are available and there is more than one input 
    parameter specified.